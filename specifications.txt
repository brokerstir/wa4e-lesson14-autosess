General Specifications

Here are some general specifications for this assignment:

    You must use the PHP PDO database layer for this assignment. If you use the "mysql_" library routines or "mysqli" routines to access the database, you will receive a zero on this assignment.
    Your name must be in the title tag of the HTML for all of the pages for this assignment.
    Your program must be resistant to HTML Injection attempts. All data that comes from the users must be properly escaped using the htmlentities() function in PHP. You do not need to escape text that is generated by your program.
    Your program must be resistant to SQL Injection attempts. This means that you should never concatenate user provided data with SQL to produce a query. You should always use a PDO prepared statement.
    Please do not use HTML5 in-browser data validation (i.e. type="number") for the fields in this assignment as we want to make sure you can properly do server side data validation. And in general, even when you do client-side data validation, you should still validate data on the server in case the user is using a non-HTML5 browser.


    There are several changes that are needed for this assignment as follows:

       The script must redirect after every POST. It must never produce HTML output as a result of a POST operation.
       It must redirect to view.php instead of autos.php and must pass the logged in user's name through the session. A GET parameter is not allowed.

       // Redirect the browser to view.php
       $_SESSION['name'] = $_POST['email'];
       header("Location: view.php");
       return;

       All error messages must be passed between the POST and GET using the session and "flash message" pattern:

       $_SESSION['error'] = "Email must have an at-sign (@)";
       header("Location: login.php");
       return;

       The error message must be displayed only on the next GET request. propertly implement the POST-Redirect-GET-Flash pattern.

       if ( isset($_SESSION['error']) ) {
           echo('<p style="color: red;">'.htmlentities($_SESSION['error'])."</p>\n");
           unset($_SESSION['error']);
       }

       Subsequent GET requests (i.e. refreshing the page) should not show the error message to

   Specifications for the Auto Database Screens

   The autos.php script from the previous assignment is broken into two scripts in this assignment. The view.pbp script shows the list of automobiles in the database and the add.php script handles adding new automobiles to the database but does not list any autos. The view.pbp includes a link to add.php and logout.php and the add.php has a Cancel button.

   In order to protect the database from being modified without the user properly logging in, the view.php and add.php must first check the session to see if the user's name is set and if the user's name is not present, the view.php must stop immediately using the PHP die() function:

if ( ! isset($_SESSION['name']) ) {
   die('Not logged in');
}

To test, navigate to view.php manually without logging in - it should fail with "Not logged in".

In view.php if the Logout button is pressed the user should be redirected back to the logout.php page. The logout.php page should clear the session and immediately reditect back to index.php:

session_start();
session_destroy();
header('Location: index.php');

In the add.php script, when the "Add" button is pressed, you need to the same input validation as in the previus assignment, except that you must display the error using a proper POST-ReDirect-GET-Flash pattern.
In the add.php script, when you successfully add data to your database, you need to redirect back to view.php and pass a "success message" to view.php using the session:

$_SESSION['success'] = "Record inserted";
header("Location: view.php");
return;

The view.php must detect and display the success message using the flash pattern:

if ( isset($_SESSION['success']) ) {
   echo('<p style="color: green;">'.htmlentities($_SESSION['success'])."</p>\n");
   unset($_SESSION['success']);
}

FOLLOWING ARE SPECS FROM PREVIOUS ASSIGNMENT IN WA4E COURSE. THIS CARRIES OVER TO THIS ASSIGNMENT BECAUSE THE DATABASE AND TABLES USED ARE THE SAME.

Databases and Tables Required for the Assignment

You already should have a PHP hosting environment such as MAMP or XAMPP installed or have some other access to a MySQL client to run commands.

You will need to create a database, a user to connect to the database and a password for that user using commands similar to the following:

create database misc;

GRANT ALL ON misc.* TO 'fred'@'localhost' IDENTIFIED BY 'zap';
GRANT ALL ON misc.* TO 'fred'@'127.0.0.1' IDENTIFIED BY 'zap';

You will need to make a connection to that database in a file like this if you are using MAMP (Macintosh):

<?php
$pdo = new PDO('mysql:host=localhost;port=8889;dbname=misc', 'fred', 'zap');
$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

If you are using XAMPP or Linux yor file should change the port to 3306:

<?php
$pdo = new PDO('mysql:host=localhost;port=3306;dbname=misc', 'fred', 'zap');
$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

Usually this file is named pdo.php and is included in each of the files that want to use the database. You will need to change the user name and password on both your GRANT statements and in the code that makes the PDO connection.

You will also need to create and configure a table in the new "misc" database using the following SQL commands:

CREATE TABLE autos (
   auto_id INT UNSIGNED NOT NULL AUTO_INCREMENT KEY,
   make VARCHAR(128),
   year INTEGER,
   mileage INTEGER
);
